{
/*
	// Place your snippets for ModL here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"do...while loop": {

        "prefix": "do",
        "body": [
            "do",
            "{",
            "    $0",
            "} while (${1:true});"
        ],
        "description": "do...while loop"
	},
	
	"Else statement": {

        "prefix": "else",
        "body": [
            "else",
            "{",
            "    $0",
            "}"
        ],
        "description": "Else statement"
	},

	"Reverse for loop": {

        "prefix": "forr",
        "body": [
            "for (int ${1:i} = ${2:length} - 1; ${1:i} >= 0 ; ${1:i}--)",
            "{",
            "    $0",
            "}"
        ],
        "description": "Reverse for loop"
	},
	
	"for loop": {

        "prefix": "for",
        "body": [
            "for (${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++)",
            "{",
            "    $0",
            "}"
        ],
        "description": "for loop"
	},
	
	"if statement": {

        "prefix": "if",
        "body": [
            "if (${1:true})",
            "{",
            "    $0",
            "}"
        ],
        "description": "if statement"
	},
	
	"#if": {

        "prefix": "ifd",
        "body": [
            "#if ${1:true}",
            "    $0",
            "#endif"
        ],
        "description": "#if"
	},
	
	"Switch statement": {

        "prefix": "switch",
        "body": [
            "switch (${1:switch_on})",
			"{",
			"    case ${2:integerConstant}",
            "        $0",
			"        break;",
			"    default:",
			"        break;",
            "}"
        ],
        "description": "Switch statement"
	},
	
	"While loop": {

        "prefix": "while",
        "body": [
            "while (${1:true})",
            "{",
            "    $0",
            "}"
        ],
        "description": "While loop"
    },

    
    "AnimItem": {

        "prefix": "animitem",
        "body": [
            "#define Use_AnimItem"
        ],
        "description": "AnimItem"
    },

    "AnimItemQueue": {

        "prefix": "animitemqueue",
        "body": [
            "#define Use_AnimItemQueue",
            "",
            "procedure DoDefineAnimItemQueue()",
            "{",
            "    AnimItemQueue_Define(${1:liObj}, ${2:dx}, ${3:dy}, ${4:liMaxCols}, ${5:liMaxRows}, ${6:liHorizontal});",
            "}"
        ],
        "description": "AnimItemQueue"
    },

    "Checkbox": {

        "prefix": "checkbox",
        "body": [
            "#define Use_Checkbox",
            "",
            "procedure DoDefineCheckbox()",
            "{",
            "    Checkbox_Define(\"${1:wVariableName}\", ${2:liFirstCol}, ${3:liLastCol});",
            "}"
        ],
        "description": "Checkbox"
    },

    "Connector": {

        "prefix": "connector",
        "body": [
            "#define Use_Connector",
            "",
            "procedure DoDefineConnectors()",
            "{",
            "    Connector_Define(\"${1:Con1In}\";",
            "}"
        ],
        "description": "Connector"
    },

    "DbLink": {

        "prefix": "dblink",
        "body": [
            "#define Use_DbLink",
            "",
            "procedure DoDefineDbLink()",
            "{",
            "    DbLink_Define(\"${1:Database1}\", \"${2:Table}\", \"${3:FieldKey}\", \"${4:wKey}\", \"${5:FieldPopup}\", \"${6:wPopup}\", ${7:IgnoreIfNotLinked}, ${8:IgnoreClone});",
            "    DbLink_AddLink(\"MyRecord()\", \"wRecord\");",
            "    DbLink_AddLink(\"FieldTexte\", \"AnimObj(1)\");",
            "    DbLink_AddLink(\"FieldValeur\", \"wValeur\");",
            "}"
        ],
        "description": "DbLink"
    },

    "HoldItem": {

        "prefix": "holditem",
        "body": [
            "#define Use_HoldItem",
            "",
            "procedure DoDefineHoldItem()",
            "{",
            "    HoldItem_Define(\"${1:ItemIn}\",\"${2:ItemOut}\");",
            "}",
            "on ${1:ItemIn}",
            "{",
            "    OnConnectorMsg(\"${1:ItemIn}\");",
            "}",
            "",
            "on ${1:ItemOut}",
            "{",
            "    OnConnectorMsg(\"${2:ItemOut}\");",
            "}",
            "",
            "procedure DoItemCanEnter(integer liNthConIn, integer liItemIndex, integer liSender)",
            "{",
            "    HoldItem_ReturnNeedIn(HoldItem_cPRIO_REJECT);",
            "}",

            "procedure DoItemCanLeave(integer liNthConOut, integer liItemIndex, integer liSender)",
            "{",
            "    HoldItem_ReturnNeedOut(HoldItem_cPRIO_REJECT,-1);",
            "}",
            "",
            "procedure DoItemEntering(integer liNthConIn, integer liItemIndex)",
            "{",
            "    ",
            "}",
            "",
            "procedure DoItemEntered(integer liNthConIn, integer liItemIndex)",
            "{",
            "    $0",
            "}",
            "",
            "procedure DoItemLeaving(integer liNthConOut, integer liItemIndex)",
            "{",
            "    ",
            "}",
            "",
            "procedure DoItemLeft(integer liNthConOut, integer liItemIndex)",
            "{",
            "    ",
            "}"
        ],
        "description": "HoldItem"
    },

    "PassItem": {

        "prefix": "passitem",
        "body": [
            "#define Use_PassItem",
            "",
            "procedure DoDefinePassItem()",
            "{",
            "    PassItem_Define(\"${1:ItemIn}\",\"${2:ItemOut}\");",
            "}",
            "",
            "on ${1:ItemIn}",
            "{",
            "    OnConnectorMsg(\"${1:ItemIn}\");",
            "}",
            "",
            "on ${2:ItemOut}",
            "{",
            "    OnConnectorMsg(\"${2:ItemOut}\");",
            "}",
            "",
            "procedure DoItemCanPass(integer liNthConIn, integer liNthConOut, integer liItemIndex, integer liWant)",
            "{",
            "    PassItem_ReturnNeedThrough(PassItem_cPRIO_REJECT);",
            "}",
            "",
            "procedure DoItemPassed(integer liNthConIn, integer liNthConOut, integer liItemIndex)",
            "{",
            "    $0",
            "}"
        ],
        "description": "PassItem"
    },

    "Popup": {

        "prefix": "popup",
        "body": [
            "#define Use_Popup",
            "",
            "procedure DoDefinePopup()",
            "{",
            "    $0",
            "}",
            "",
            "procedure DoPopupChanged(string lsPopupVariableName, integer liRow, integer liCol)",
            "{",
            "" ,   
            "}"
        ],
        "description": "Popup"
    },

    "Sensor": {

        "prefix": "sensor",
        "body": [
            "#define Use_SensorConn",
            "",
            "procedure DoDefineSensorConn()",
            "{",
            "    SensorConn_Define(\"${1:ConName}\");",
            "}",
            "",
            "procedure DoReceiveSensorConnMsg(string lsConnName, integer liNthCon, integer liItemIndex)",
            "{",
            "    if (lsConnName==\"${1:ConName}\")",
            "    {",
            "        $0",
            "    }",
            "}",
            "",
            "on ${1:ConName}",
            "{",
            "    OnConnectorMsg(\"${1:ConName}\");",
            "}"
        ],
        "description": "Sensor"
    },

    "VariableConn": {

        "prefix": "variableconn",
        "body": [
            "#define Use_VariableConn",
            "",
            "procedure DoDefineVariableConn()",
            "{",
            "    VariableConn_Define(\"${1:ConName}\", ${2:3}, \"${3:label1;label2;label3}\", ${4:VariableConn_cRight});",
            "}",
            "",
            "procedure DoVariableConnValueChanged(string lsConnName, integer liNthCon, real lrValue)",
            "{",
            "    ",
            "}"
        ],
        "description": "VariableConn"
    }

}